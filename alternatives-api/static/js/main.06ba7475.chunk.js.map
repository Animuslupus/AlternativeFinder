{"version":3,"sources":["AlternativeForm.js","GridProductView.js","App.js","reportWebVitals.js","index.js"],"names":["rankings","key","text","value","AlternativeForm","props","handleFormChange","e","name","setState","handleSubmit","requestOptions","method","headers","body","JSON","stringify","productId","product","alternativeId","alternative","descriptionGerman","state","descriptionDE","descriptionEnglish","descriptionEN","ranking","fetch","then","r","status","json","submitted","submissionError","statusMessage","setTimeout","callback","selectDuplicate","entryDuplicate","this","productsDefined","emissionsSaved","Math","round","map","a","Form","widths","onSubmit","Group","Input","label","readOnly","Field","control","TextArea","onChange","placeholder","error","Select","options","Message","visible","success","header","content","getDisplayMessage","Button","disabled","React","Component","GridProductView","queryData","response","result","isLoaded","products","productsFiltered","searchQuery","console","log","handleSearchChange","length","re","RegExp","filteredProducts","filter","test","onCardClick","find","v","selectedProduct","setInterval","Segment","Container","Header","heading","Search","style","marginBottom","showNoResults","resultRenderer","onSearchChange","Grid","columns","stackable","Column","Card","onClick","color","Image","src","maxHeight","centered","Content","Description","fontWeight","Meta","extra","List","Item","textAlign","Loader","App","clearSelection","contextRef","createRef","rank","marginTop","paddingLeft","paddingRight","fluid","as","Ref","innerRef","borderRight","selectProduct","selectAlternative","Sticky","context","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.06ba7475.chunk.js","sourcesContent":["import React from 'react'\nimport { Form, Message, TextArea } from 'semantic-ui-react'\n\nconst rankings = [\n    { key: '1', text: '1', value: 1 },\n    { key: '2', text: '2', value: 2 },\n    { key: '3', text: '3', value: 3 },\n    { key: '4', text: '4', value: 4 },\n    { key: '5', text: '5', value: 5 },\n    { key: '6', text: '6', value: 6 },\n    { key: '7', text: '7', value: 7 },\n    { key: '8', text: '8', value: 8 },\n    { key: '9', text: '9', value: 9 },\n    { key: '10', text: '10', value: 10 },\n]\n\nclass AlternativeForm extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            descriptionDE: '',\n            descriptionEN: '',\n            ranking: 1,\n            submitted: false,\n            submissionError: false,\n            statusMessage: '',\n        };\n    }\n\n    handleFormChange = (e, { name, value }) => { this.setState({ [name]: value }) }\n\n    handleSubmit = () => {\n        const requestOptions = {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({\n                productId: this.props.product['id'],\n                alternativeId: this.props.alternative['id'],\n                descriptionGerman: this.state.descriptionDE,\n                descriptionEnglish: this.state.descriptionEN,\n                ranking: this.state.ranking\n            })\n        };\n        fetch('http://127.0.0.1:5000/alternative', requestOptions).then((r) => {\n            if (r.status != 200) {\n                r.json().then(\n                    (value) => {\n                        this.setState({ submitted: true, submissionError: true, statusMessage: value['message'] })\n                        setTimeout(() => { this.setState({ submitted: false }) }, 10000)\n                    }\n                )\n            } else {\n                this.setState({ submitted: true, submissionError: false, statusMessage: 'Your Product-Alternative pair was added to the database' })\n                setTimeout(() => { this.setState({ submitted: false }) }, 5000)\n                this.props.callback()\n            }\n        })\n\n    }\n\n    getDisplayMessage(selectDuplicate, entryDuplicate) {\n        if (selectDuplicate)\n            return \"You selected the same Product as its alternative - please choose a different product or alternative.\"\n        else if (entryDuplicate)\n            return \"The selected alternative is already listed as alternative for the selected product.\"\n        else\n            return this.state.statusMessage\n    }\n\n    render() {\n\n        const productsDefined = this.props.product && this.props.alternative\n        var emissionsSaved = productsDefined ? this.props.product['emissions'] - this.props.alternative['emissions'] : 0;\n        emissionsSaved = Math.round(emissionsSaved * 100) / 100\n        const selectDuplicate = productsDefined ? this.props.product['id'] === this.props.alternative['id'] : false\n\n        const entryDuplicate = productsDefined ? this.props.alternative['id'] in this.props.product['alternatives'].map(a => a['id']) : false\n\n        return (\n            <Form widths=\"equal\" onSubmit={this.handleSubmit}>\n                <Form.Group>\n                    <Form.Input label=\"Selected Product\" readOnly\n                        value={this.props.product ? this.props.product['nameGerman'] : 'No Product Selected'} />\n                    <Form.Input label=\"Selected Alternative\" readOnly\n                        value={this.props.alternative ? this.props.alternative['nameGerman'] : 'No Alternative Selected'} />\n                </Form.Group>\n                <Form.Group>\n                    <Form.Field control={TextArea} label=\"Description German\" name=\"descriptionDE\" value={this.state.descriptionDE} onChange={this.handleFormChange} />\n                </Form.Group>\n                <Form.Group>\n                    <Form.Field control={TextArea} label=\"Description English\" name=\"descriptionEN\" value={this.state.descriptionEN} onChange={this.handleFormChange} />\n                </Form.Group>\n                <Form.Group >\n                    <Form.Input label=\"Emission Saved\" readOnly placeholder='None'\n                        error={emissionsSaved < 0} value={emissionsSaved} />\n                    <Form.Select\n                        label='Ranking'\n                        name=\"ranking\"\n                        value={this.state.ranking}\n                        onChange={this.handleFormChange}\n                        options={rankings}\n                        placeholder='Ranking'\n                    />\n                </Form.Group>\n                <Message\n                    visible={selectDuplicate || this.state.submitted || entryDuplicate}\n                    success={!selectDuplicate && !this.state.submissionError && !entryDuplicate}\n                    error={selectDuplicate || this.state.submissionError || entryDuplicate}\n                    header={selectDuplicate || entryDuplicate ? \"Duplication\" : this.state.submissionError ? \"Submission Error\" : \"Submission Successful\"}\n                    content={this.getDisplayMessage(selectDuplicate, entryDuplicate)}\n                />\n                <Form.Button content='Submit' disabled={selectDuplicate || !productsDefined} />\n            </Form>\n        );\n    }\n}\n\nexport default AlternativeForm;","import React from 'react';\nimport { Card, Grid, Loader, Segment, Container, Image, Search, Header, List, Icon, Popup } from \"semantic-ui-react\";\n\n\nclass GridProductView extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            isLoaded: false,\n            //searchLoading: false,\n            searchQuery: '',\n            //searchResults: [],\n            productsFiltered: [],\n            products: [],\n            selectedProduct: -1,\n        };\n    }\n\n    queryData = () => {\n        fetch(\"http://127.0.0.1:5000/products\")\n            .then(response => response.json())\n            .then(\n                // handle the result\n                (result) => {\n                    this.setState({\n                        isLoaded: true,\n                        products: result,\n                        productsFiltered: this.state.searchQuery ? this.state.productsFiltered : result,\n                    });\n                },\n\n                // Handle error \n                (error) => {\n                    console.log(error)\n                },\n            )\n\n    }\n\n    componentDidMount() {\n        setInterval(this.queryData, 2000)\n    }\n\n    handleSearchChange = (e, { value }) => {\n        this.setState({ searchQuery: value })\n        setTimeout(() => {\n            if (this.state.searchQuery.length < 1) return this.setState({ productsFiltered: this.state.products })\n\n            const re = new RegExp(this.state.searchQuery, 'i')\n            const isMatch = (value) => re.test(value['nameGerman']) || re.test(value['category'])\n\n            const filteredProducts = this.state.products.filter(isMatch)\n            this.setState({\n                productsFiltered: filteredProducts,\n            })\n        }, 300)\n    }\n\n    onCardClick = (product) => {\n        console.log(product)\n        console.log(this.state.products.find(v=>v['id'] == product['id']))\n        this.props.callback(product)\n        this.setState({ selectedProduct: product['id'] })\n    }\n\n    render() {\n        const { error, isLoaded, searchQuery, productsFiltered } = this.state;\n        if (error) {\n            return <Segment>{error}</Segment>\n        } else if (!isLoaded) {\n            return <Container textAlign=\"center\"><Loader>Loading</Loader></Container>\n        } else {\n            return (\n                <Container>\n                    <Header>{this.props.heading}</Header>\n                    \n                    <Search\n                        style={{ marginBottom: '1em' }}\n                        showNoResults={false}\n                        resultRenderer={() => { }}\n                        /*onResultSelect={(e, data) =>\n                            dispatch({ type: 'UPDATE_SELECTION', selection: data.result.title })\n                        }*/\n                        //loading={searchLoading}\n                        onSearchChange={this.handleSearchChange}\n                        //results={searchResults}\n                        value={searchQuery}\n                    />\n                    <Grid columns={3} stackable>\n                        {\n                            productsFiltered.map(product => (\n                                <Grid.Column key={product['id']}>\n                                    <Card\n                                        onClick={() => { this.onCardClick(product) }}\n                                        //style={this.state.selectedProduct == product['product'] ? { backgroundColor: 'lightgrey' } : {}}\n                                        color={this.state.selectedProduct == product['id'] ? \"green\" : \"grey\"}\n                                    >\n                                        <Image src={product['imageLink']} style={{ maxHeight: '150px' }} centered />\n                                        <Card.Content>\n                                            <Card.Description style={{ fontWeight: 'bold' }}>{product['nameGerman']}</Card.Description>\n                                            <Card.Meta>Category: {product['category']}</Card.Meta>\n                                            <Card.Description>Emissions: {product['emissions']}</Card.Description>\n                                        </Card.Content>\n                                        <Card.Content extra>\n                                            <List>\n                                                {product['alternatives'].map(product => (\n                                                    <List.Item key={product['id']}>{product['nameGerman']}</List.Item>\n                                                ))}\n                                            </List>\n                                        </Card.Content>\n                                    </Card>\n                                </Grid.Column>\n                            ))\n                        }\n                    </Grid>\n                </Container>\n            );\n        }\n    }\n}\n\nexport default GridProductView","import React from 'react';\nimport { Container, Grid, Header, GridColumn, Divider, Form, TextArea, Message, Button, Sticky, creat, Rail, Ref } from 'semantic-ui-react'\nimport AlternativeForm from './AlternativeForm';\nimport GridProductView from './GridProductView';\n\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      product: null,\n      alternative: null,\n      rank: 0,\n\n    };\n  }\n\n  selectProduct(product) {\n    this.setState({\n      product: product,\n    })\n  }\n\n  selectAlternative(alternative) {\n    this.setState({\n      alternative: alternative,\n    })\n  }\n\n  handleFormChange(e, value) {\n    console.log(value)\n  }\n\n  clearSelection = () => {\n  }\n\n  contextRef = React.createRef()\n\n  render() {\n    return (\n      <Container textAlign=\"center\" style={{ marginTop: '1em', paddingLeft: '10em', paddingRight: '10em' }} fluid>\n        <Header as=\"h1\" >Find Alternative To - Alternative Form</Header>\n        <p style={{ marginBottom: '2em' }}>Tipp: You can use the search-bar to search for product-categories</p>\n        <Ref innerRef={this.contextRef}>\n          <Grid columns={3}>\n            <Grid.Column style={{ borderRight: \"1px solid rgb(212, 212, 212)\" }}>\n              <GridProductView callback={(product) => this.selectProduct(product)} heading=\"Product\" />\n            </Grid.Column>\n            <Grid.Column style={{ borderRight: \"1px solid rgb(212, 212, 212)\" }}>\n              <GridProductView callback={(product) => this.selectAlternative(product)} heading=\"Alternative\" />\n            </Grid.Column>\n            <Grid.Column>\n              <Sticky context={this.contextRef} >\n                <Header>Form</Header>\n                <AlternativeForm product={this.state.product} alternative={this.state.alternative} callback={this.clearSelection} />\n              </Sticky>\n            </Grid.Column>\n          </Grid>\n        </Ref>\n      </Container>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'semantic-ui-css/semantic.min.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}